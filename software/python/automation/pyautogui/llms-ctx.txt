# PyAutoGUI
## Summary
PyAutoGUI is a cross-platform GUI automation Python module that lets your Python scripts control the mouse and keyboard to automate interactions with other applications. The API is designed to be simple and works on Windows, macOS, and Linux.

PyAutoGUI provides functions for mouse and keyboard control, screenshot capabilities, image recognition, and message box display. It's designed for automating repetitive tasks, GUI testing, and creating bots that can interact with application interfaces.

## Installation

### Installation Guide

[Platform-specific installation instructions for Windows, macOS, and Linux](https://pyautogui.readthedocs.io/en/latest/install.html)

## Installation

To install PyAutoGUI, install the `pyautogui` package from PyPI by running `pip install pyautogui` (on Windows) or `pip3 install pyautogui` (on macOS and Linux). (On macOS and Linux, `pip` refers to Python 2's pip tool.)

OS-specific instructions are below.

### Windows

On Windows, you can use the `py.exe` program to run the latest version of Python:
`py -m pip install pyautogui`

If you have multiple versions of Python installed, you can select which one with a command line argument to `py`. For example, for Python 3.8, run:
`py -3.8 -m pip install pyautogui`

(This is the same as running `pip install pyautogui`.)

### macOS

On macOS and Linux, you need to run `python3`:
`python3 -m pip install pyautogui`

If you are running El Capitan and have problems installing pyobjc try:
`MACOSX_DEPLOYMENT_TARGET=10.11 pip install pyobjc`

### Linux

On macOS and Linux, you need to run `python3`:
`python3 -m pip install pyautogui`

On Linux, additionally you need to install the `scrot` application, as well as Tkinter:
`sudo apt-get install scrot`
`sudo apt-get install python3-tk`
`sudo apt-get install python3-dev`

PyAutoGUI install the modules it depends on, including PyTweening, PyScreeze, PyGetWindow, PymsgBox, and MouseInfo.

## Core Features

### Mouse Control

[Functions for moving the mouse cursor, clicking, dragging, and scrolling](https://pyautogui.readthedocs.io/en/latest/mouse.html)

# Mouse Control Functions

## The Screen and Mouse Position

Locations on your screen are referred to by X and Y Cartesian coordinates. The X coordinate starts at 0 on the left side and increases going right. Unlike in mathematics, the Y coordinate starts at 0 on the top and increases going down.

```md
0,0 X increases -->
+---------------------------+
| | Y increases
| | |
| 1920 x 1080 screen | |
| | V
| |
| |
+---------------------------+ 1919, 1079
```

The pixel at the top-left corner is at coordinates 0, 0. If your screen's resolution is 1920 x 1080, the pixel in the lower right corner will be 1919, 1079 (since the coordinates begin at 0, not 1).

The screen resolution size is returned by the `size()` function as a tuple of two integers. The current X and Y coordinates of the mouse cursor are returned by the `position()` function.

For example:

```python
pyautogui.size()
(1920, 1080)
pyautogui.position()
(187, 567)
```

To check if XY coordinates are on the screen, pass them to the `onScreen()` function, which will return `True` if they are within the screen's boundaries and `False` if not.

## Mouse Movement

The `moveTo()` function will move the mouse cursor to the X and Y integer coordinates you pass it. The `None` value can be passed for a coordinate to mean "the current mouse cursor position".

Normally the mouse cursor will instantly move to the new coordinates. If you want the mouse to gradually move to the new location, pass a third argument for the duration (in seconds) the movement should take.

If you want to move the mouse cursor over a few pixels *relative* to its current position, use the `move()` function.

## Mouse Drags

PyAutoGUI's `dragTo()` and `drag()` functions have similar parameters as the `moveTo()` and `move()` functions. In addition, they have a `button` keyword which can be set to `'left'`, `'middle'`, and `'right'` for which mouse button to hold down while dragging.

## Tween / Easing Functions

A tween or easing function dictates the progress of the mouse as it moves to its destination. PyAutoGUI has various tweening functions available in the `pyautogui` module, such as `easeInQuad`, `easeOutQuad`, `easeInOutQuad`, `easeInBounce`, and `easeInElastic`.

## Mouse Clicks

The `click()` function simulates a single, left-button mouse click at the mouse's current position. To combine a `moveTo()` call before the click, pass integers for the `x` and `y` keyword argument. To specify a different mouse button to click, pass `'left'`, `'middle'`, or `'right'` for the `button` keyword argument.

To do multiple clicks, pass an integer to the `clicks` keyword argument. Optionally, you can pass a float or integer to the `interval` keyword argument to specify the amount of pause between the clicks in seconds.

As convenient shortcuts, PyAutoGUI provides `doubleClick()`, `tripleClick()`, and `rightClick()` functions.

## The mouseDown() and mouseUp() Functions

Mouse clicks and drags are composed of both pressing the mouse button down and releasing it back up. If you want to perform these actions separately, call the `mouseDown()` and `mouseUp()` functions.

## Mouse Scrolling

The mouse scroll wheel can be simulated by calling the `scroll()` function and passing an integer number of "clicks" to scroll. On OS X and Linux platforms, PyAutoGUI can also perform horizontal scrolling by calling the `hscroll()` function.

### Keyboard Control

[Functions for typing text and pressing keyboard keys](https://pyautogui.readthedocs.io/en/latest/keyboard.html)

# Keyboard Control Functions

## The write() Function

The primary keyboard function is `write()`. This function will type the characters in the string that is passed. To add a delay interval in between pressing each character key, pass an int or float for the `interval` keyword argument.

For example:

pyautogui.write('Hello world!') # prints out "Hello world!" instantly
pyautogui.write('Hello world!', interval=0.25) # prints out "Hello world!" with a quarter second delay after each character

text

You can only press single-character keys with `write()`, so you can't press the Shift or F1 keys, for example.

## The press(), keyDown(), and keyUp() Functions

To press these keys, call the `press()` function and pass it a string from the `pyautogui.KEYBOARD_KEYS` such as `enter`, `esc`, `f1`.

The `press()` function is really just a wrapper for the `keyDown()` and `keyUp()` functions, which simulate pressing a key down and then releasing it up. These functions can be called by themselves.

To press multiple keys similar to what `write()` does, pass a list of strings to `press()`. Or you can set how many presses with the `presses` parameter.

## The hold() Context Manager

To make holding a key convenient, the `hold()` function can be used as a context manager and passed a string from the `pyautogui.KEYBOARD_KEYS` such as `shift`, `ctrl`, `alt`, and this key will be held for the duration of the `with` context block.

## The hotkey() Function

To make pressing hotkeys or keyboard shortcuts convenient, the `hotkey()` can be passed several key strings which will be pressed down in order, and then released in reverse order.

## KEYBOARD_KEYS

The module provides a comprehensive list of valid strings to pass to the `press()`, `keyDown()`, `keyUp()`, and `hotkey()` functions, including all alphanumeric characters, special characters, and various control keys like function keys, arrow keys, and modifier keys.

### Screenshot Functions

[Taking screenshots and image recognition capabilities](https://pyautogui.readthedocs.io/en/latest/screenshot.html)

# Screenshot Functions

PyAutoGUI can take screenshots, save them to files, and locate images within the screen. This is useful if you have a small image of, say, a button that needs to be clicked and want to locate it on the screen. These features are provided by the PyScreeze module, which is installed with PyAutoGUI.

Screenshot functionality requires the Pillow module. OS X uses the `screencapture` command, which comes with the operating system. Linux uses the `scrot` command, which can be installed by running `sudo apt-get install scrot`.

## The screenshot() Function

Calling `screenshot()` will return an Image object (see the Pillow or PIL module documentation for details). Passing a string of a filename will save the screenshot to a file as well as return it as an Image object.

```python
import pyautogui
im1 = pyautogui.screenshot()
im2 = pyautogui.screenshot('my_screenshot.png')
```

On a 1920 x 1080 screen, the `screenshot()` function takes roughly 100 milliseconds - it's not fast but it's not slow.

There is also an optional `region` keyword argument, if you do not want a screenshot of the entire screen. You can pass a four-integer tuple of the left, top, width, and height of the region to capture.

## The Locate Functions

NOTE: As of version 0.9.41, if the locate functions can't find the provided image, they'll raise `ImageNotFoundException` instead of returning `None`.

You can visually locate something on the screen if you have an image file of it. The return value of `locateOnScreen()` is a 4-integer tuple: (left, top, width, height). This tuple can be passed to `center()` to get the X and Y coordinates at the center of this region.

The optional `confidence` keyword argument specifies the accuracy with which the function should locate the image on screen. This is helpful in case the function is not able to locate an image due to negligible pixel differences. Note: You need to have installed OpenCV for the `confidence` keyword to work.

The `locateCenterOnScreen()` function combines `locateOnScreen()` and `center()`.

There are several "locate" functions:
- `locateOnScreen(image, grayscale=False)` - Returns (left, top, width, height) coordinate of first found instance of the `image` on the screen.
- `locateCenterOnScreen(image, grayscale=False)` - Returns (x, y) coordinates of the center of the first found instance of the `image` on the screen.
- `locateAllOnScreen(image, grayscale=False)` - Returns a generator that yields (left, top, width, height) tuples for where the image is found on the screen.
- `locate(needleImage, haystackImage, grayscale=False)` - Returns (left, top, width, height) coordinate of first found instance of `needleImage` in `haystackImage`.
- `locateAll(needleImage, haystackImage, grayscale=False)` - Returns a generator that yields (left, top, width, height) tuples for where `needleImage` is found in `haystackImage`.

These "locate" functions are fairly expensive; they can take a full second to run. The best way to speed them up is to pass a `region` argument to only search a smaller region of the screen instead of the full screen.

### Grayscale Matching

Optionally, you can pass `grayscale=True` to the locate functions to give a slight speedup (about 30%-ish). This desaturates the color from the images and screenshots, speeding up the locating but potentially causing false-positive matches.

### Pixel Matching

To obtain the RGB color of a pixel in a screenshot, use the Image object's `getpixel()` method or the `pixel()` PyAutoGUI function. If you just need to verify that a single pixel matches a given pixel, call the `pixelMatchesColor()` function, passing it the X coordinate, Y coordinate, and RGB tuple of the color it represents.

### Message Box Functions

[Displaying alert, confirm, prompt, and password boxes](https://pyautogui.readthedocs.io/en/latest/msgbox.html)

# Message Box Functions

PyAutoGUI makes use of the message box functions in PyMsgBox to provide a cross-platform, pure Python way to display JavaScript-style message boxes. There are four message box functions provided:

## The alert() Function

```python
alert(text='', title='', button='OK')
```

Displays a simple message box with text and a single OK button. Returns the text of the button clicked on.

## The confirm() Function
```python
confirm(text='', title='', buttons=['OK', 'Cancel'])
```

Displays a message box with OK and Cancel buttons. Number and text of buttons can be customized. Returns the text of the button clicked on.

## The prompt() Function
```python
prompt(text='', title='' , default='')
```

Displays a message box with text input, and OK & Cancel buttons. Returns the text entered, or None if Cancel was clicked.

## The password() Function
```python
password(text='', title='', default='', mask='*')
```

Displays a message box with text input, and OK & Cancel buttons. Typed characters appear as `*`. Returns the text entered, or None if Cancel was clicked.

## Examples

### Quick Start Guide

[Cheat sheet with common usage examples](https://pyautogui.readthedocs.io/en/latest/quickstart.html)

# Cheat Sheet

PyAutoGUI is cross-platform GUI automation module that works on Python 2 & 3. You can control the mouse and keyboard as well as perform basic image recognition.

## Mouse Functions

XY coordinates have 0, 0 origin at top left corner of the screen. X increases going right, Y increases going down.

```python
pyautogui.moveTo(x, y, duration=num_seconds) # move mouse to XY coordinates over num_second seconds
pyautogui.moveRel(xOffset, yOffset, duration=num_seconds) # move mouse relative to its current position
```

If `duration` is 0 or unspecified, movement is immediate. Note: dragging on Mac can't be immediate.

```python
pyautogui.dragTo(x, y, duration=num_seconds) # drag mouse to XY
pyautogui.dragRel(xOffset, yOffset, duration=num_seconds) # drag mouse relative to its current position
```

Calling `click()` just clicks the mouse once with the left button at the mouse's current location, but the keyword arguments can change that:

```python
pyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button='left')
```

The `button` keyword argument can be `'left'`, `'middle'`, or `'right'`.

All clicks can be done with `click()`, but these functions exist for readability. Keyword args are optional:
```python
pyautogui.rightClick(x=moveToX, y=moveToY)
pyautogui.middleClick(x=moveToX, y=moveToY)
pyautogui.doubleClick(x=moveToX, y=moveToY)
pyautogui.tripleClick(x=moveToX, y=moveToY)
```

Positive scrolling will scroll up, negative scrolling will scroll down:

```python
pyautogui.scroll(amount_to_scroll, x=moveToX, y=moveToY)
```

Individual button down and up events can be called separately:
```python
pyautogui.mouseDown(x=moveToX, y=moveToY, button='left')
pyautogui.mouseUp(x=moveToX, y=moveToY, button='left')
```

## Keyboard Functions

Key presses go to wherever the keyboard cursor is at function-calling time.

```python
pyautogui.typewrite('Hello world!\n', interval=secs_between_keys) # useful for entering text, newline is Enter
```

A list of key names can be passed too:

```python
pyautogui.typewrite(['a', 'b', 'c', 'left', 'backspace', 'enter', 'f1'], interval=secs_between_keys)
```

The full list of key names is in `pyautogui.KEYBOARD_KEYS`.

Keyboard hotkeys like Ctrl-S or Ctrl-Shift-1 can be done by passing a list of key names to `hotkey()`:

```python
pyautogui.hotkey('ctrl', 'c') # ctrl-c to copy
pyautogui.hotkey('ctrl', 'v') # ctrl-v to paste
```

Individual button down and up events can be called separately:

```python
pyautogui.keyDown(key_name)
pyautogui.keyUp(key_name)
```

## Message Box Functions

If you need to pause the program until the user clicks OK on something, or want to display some information to the user, the message box functions have similar names that JavaScript has:

```python
pyautogui.alert('This displays some text with an OK button.')
pyautogui.confirm('This displays text and has an OK and Cancel button.')
'OK'
pyautogui.prompt('This lets the user type in a string and press OK.')
'This is what I typed in.'
```

The `prompt()` function will return `None` if the user clicked Cancel.

## Screenshot Functions

PyAutoGUI uses Pillow/PIL for its image-related data.

On Linux, you must run `sudo apt-get install scrot` to use the screenshot features.

```python
pyautogui.screenshot() # returns a Pillow/PIL Image object
<PIL.Image.Image image mode=RGB size=1920x1080 at 0x24C3EF0>
pyautogui.screenshot('foo.png') # returns a Pillow/PIL Image object, and saves it to a file
<PIL.Image.Image image mode=RGB size=1920x1080 at 0x31AA198>
```

If you have an image file of something you want to click on, you can find it on the screen with `locateOnScreen()`.

```python
pyautogui.locateOnScreen('looksLikeThis.png') # returns (left, top, width, height) of first place it is found
(863, 417, 70, 13)
```

The `locateAllOnScreen()` function will return a generator for all the locations it is found on the screen.


### GitHub Repository

[Source code and additional examples](https://github.com/asweigart/pyautogui)

# PyAutoGUI

PyAutoGUI is a cross-platform GUI automation Python module for human beings. Used to programmatically control the mouse & keyboard.

`pip install pyautogui`

Full documentation available at https://pyautogui.readthedocs.org

Simplified Chinese documentation available at https://github.com/asweigart/pyautogui/blob/master/docs/simplified-chinese.ipynb

Source code available at https://github.com/asweigart/pyautogui

If you need help installing Python, visit https://installpython3.com/

# Dependencies

PyAutoGUI supports Python 2 and 3. If you are installing PyAutoGUI from PyPI using pip:

Windows has no dependencies. The Win32 extensions do not need to be installed.

macOS needs the pyobjc-core and pyobjc module installed (in that order).

Linux needs the python3-xlib (or python-xlib for Python 2) module installed.

Pillow needs to be installed, and on Linux you may need to install additional libraries to make sure Pillow's PNG/JPEG works correctly.

If you want to do development and contribute to PyAutoGUI, you will need to install these modules from PyPI:
- pyscreeze
- pymsgbox
- pytweening

# Example Usage

## Keyboard and Mouse Control

The x, y coordinates used by PyAutoGUI has the 0, 0 origin coordinates in the top left corner of the screen. The x coordinates increase going to the right (just as in mathematics) but the y coordinates increase going down (the opposite of mathematics). On a screen that is 1920 x 1080 pixels in size, coordinates 0, 0 are for the top left while 1919, 1079 is for the bottom right.

Currently, PyAutoGUI only works on the primary monitor. PyAutoGUI isn't reliable for the screen of a second monitor.

## Optional

### Roadmap

[Planned features for future releases](https://pyautogui.readthedocs.io/en/latest/roadmap.html)

# Roadmap

PyAutoGUI is planned as a replacement for other Python GUI automation scripts, such as PyUserInput, PyKeyboard, PyMouse, pykey, etc. Eventually it would be great to offer the same type of features that offers.

For now, the primary aim for PyAutoGUI is cross-platform mouse and keyboard control and a simple API.

Future features planned (specific versions not planned yet):

- A tool for determining why an image can't be found in a particular screenshot. (This is a common source of questions for users.)
- Full compatibility on Raspberry Pis.
- "Wave" function, which is used just to see where the mouse is by shaking the mouse cursor a bit. A small helper function.
- locateNear() function, which is like the other locate-related screen reading functions except it finds the first instance near an xy point on the screen.
- Find a list of all windows and their captions.
- Click coordinates relative to a window, instead of the entire screen.
- Make it easier to work on systems with multiple monitors.
- GetKeyState() type of function
- Ability to set global hotkey on all platforms so that there can be an easy "kill switch" for GUI automation programs.
- Optional nonblocking pyautogui calls.
- "strict" mode for keyboard - passing an invalid keyboard key causes an exception instead of silently skipping it.
- rename keyboardMapping to KEYBOARD_MAPPING
- Ability to convert png and other image files into a string that can be copy/pasted directly in the source code, so that they don't have to be shared separately with people's pyautogui scripts.
- Test to make sure pyautogui works in Windows/mac/linux VMs.
- A way to compare two images and highlight differences between them (good for pointing out when a UI changes, etc.)
- Window handling features:
  - pyautogui.getWindows() # returns a dict of window titles mapped to window IDs
  - pyautogui.getWindow(str_title_or_int_id) # returns a "Win" object
  - win.move(x, y)
  - win.resize(width, height)
  - win.maximize()
  - win.minimize()
  - win.restore()
  - win.close()
  - win.position() # returns (x, y) of top-left corner
  - win.moveRel(x=0, y=0) # moves relative to current position
  - win.clickRel(x=0, y=0, clicks=1, interval=0.0, button='left') # click relative to window, in "screen" coordinates

### Known Issues

[Common problems and their solutions](https://github.com/asweigart/pyautogui/issues)

# PyAutoGUI Issues

## Mouse cursor does not visually move on GNOME

**Description**: PyAutoGUI is not moving the visual mouse pointer. Additionally, when running a script, moving the mouse to the top left corner does not stop the script. Strangely, the script still works as long as the mouse is not moved, as if the library is interacting with an invisible mouse.

**Possible Solutions**:
1. For Ubuntu/GNOME users: Switch from Wayland to Xorg. This can be done by selecting "Ubuntu on Xorg" at the login screen.
2. Try running Python IDLE as Administrator.
3. Try using just one display/monitor.
4. Restart the computer after installing PyAutoGUI and its dependencies.
5. For Windows users experiencing similar issues, try using PyDirectInput which simulates direct input.

## PyAutoGUI not reading screen pixels

**Description**: Image recognition functions like `locateOnScreen()` fail to find images on the screen.

**Possible Solutions**:
1. Install OpenCV to use the `confidence` parameter: `pip install opencv-python`
2. Reduce the matching confidence: `pos = pyautogui.locateOnScreen('btn.png', grayscale=True, confidence=0.9)`
3. Make sure the image you're searching for exactly matches what's on screen (same resolution, no scaling).

## Keyboard input issues

**Description**: `typewrite()` doesn't work for symbols or inputs wrong characters, especially on non-US keyboard layouts.

**Possible Solutions**:
1. Use the `keyboard` library and the `keyboard.write` function instead of `pyautogui.typewrite`.
2. For Unicode strings, consider using clipboard operations instead of direct typing.

## Installation issues

**Description**: "ImportError: No module named pyautogui" even after installation.

**Possible Solutions**:
1. Try installing with `python3 -m pip install pyautogui` instead of just `pip install pyautogui`.
2. For Anaconda users, make sure to install in the correct environment.
3. On Linux, ensure all dependencies are installed: `scrot`, `python3-tk`, and `python3-dev`.
4. For macOS, install dependencies in the correct order: `pyobjc-core` first, then `pyobjc`.

## Holding keys for a specific duration

**Description**: `keyDown()` doesn't cause key repeats when trying to hold a key for movement in games.

**Solution**: Use the `hold()` context manager:
```python
with pyautogui.hold(key):
pyautogui.sleep(hold_duration)
```